{"ast":null,"code":"var _jsxFileName = \"/home/mda/Documents/GitHub/notes-app/frontend/src/App.js\",\n  _s = $RefreshSig$();\n//import logo from './logo.svg'\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to hold notes and the new note input\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://localhost:5000/notes\").then(response => response.json()).then(data => setNotes(data));\n  }, []);\n  const loadNotes = () => {\n    const storedNotes = localStorage.getItem('notes');\n    if (storedNotes) {\n      setNotes(JSON.parse(storedNotes));\n    }\n  };\n  const saveNotes = () => {\n    console.log(\"Saving notes:\", notes);\n    localStorage.setItem('notes', JSON.stringify(notes));\n  };\n  const handleChange = e => {\n    setNewNote(e.target.value);\n  };\n  const handleAddNote = () => {\n    if (newNote.trim()) {\n      const updatedNotes = [...notes, newNote];\n      setNotes(updatedNotes);\n      setNewNote(\"\");\n    }\n  };\n  const handleDeleteNote = index => {\n    const updateNotes = notes.filter((note, i) => i !== index);\n    setNotes(updateNotes);\n  };\n  useEffect(() => {\n    loadNotes();\n  }, []);\n  useEffect(() => {\n    saveNotes();\n  }, [notes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newNote,\n      onChange: handleChange,\n      placeholder: \"Enter a new note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddNote,\n      children: \"Add Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notes.map((note, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [note, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeleteNote(index),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zI2aPsGwEVrrDNrEEy1GO6j6Cj4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","notes","setNotes","newNote","setNewNote","fetch","then","response","json","data","loadNotes","storedNotes","localStorage","getItem","JSON","parse","saveNotes","console","log","setItem","stringify","handleChange","e","target","value","handleAddNote","trim","updatedNotes","handleDeleteNote","index","updateNotes","filter","note","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","map","_c","$RefreshReg$"],"sources":["/home/mda/Documents/GitHub/notes-app/frontend/src/App.js"],"sourcesContent":["//import logo from './logo.svg'\nimport './App.css'\n\nimport React, {useEffect, useState} from 'react'\n\nfunction App() {\n\n // State to hold notes and the new note input\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\"\")\n\n  useEffect(() => {\n    fetch(\"http://localhost:5000/notes\")\n    .then((response) => response.json())\n    .then((data) => setNotes(data))\n  }, [])\n\n  const loadNotes = () => {\n    const storedNotes = localStorage.getItem('notes')\n\n    if (storedNotes) {\n      setNotes(JSON.parse(storedNotes))\n    }\n  }\n\n  const saveNotes = () => {\n    console.log(\"Saving notes:\", notes)\n    localStorage.setItem('notes', JSON.stringify(notes))\n  }\n\n  const handleChange = (e) => {\n    setNewNote(e.target.value)\n  }\n\n  const handleAddNote = () => {\n    if (newNote.trim()){\n      const updatedNotes = [...notes, newNote]\n      setNotes(updatedNotes)\n      setNewNote(\"\")\n    }\n  }\n\n  const handleDeleteNote = (index) => {\n    const updateNotes = notes.filter((note, i) => i !== index)\n    setNotes(updateNotes)\n  }\n\n  useEffect(() => {\n    loadNotes()\n  }, [])\n\n  useEffect(() => {\n    saveNotes();\n  }, [notes]);\n\n\n  return (\n    <div className=\"App\">\n      <h1>Notes App</h1>\n\n      {/* Input field */}\n      <input type=\"text\" value={newNote} onChange={handleChange} placeholder=\"Enter a new note\" />\n      <button onClick={handleAddNote}>Add Note</button>\n\n      {/* Notes list */}\n      <ul>\n        {notes.map((note, index) => (\n          <li key={index}>\n            {note}\n            <button onClick={() => handleDeleteNote(index)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}